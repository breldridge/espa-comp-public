# Loads in the demand actuals and makes a synthetic forecastimport pandas as pdimport numpy as npimport jsonimport timefrom scipy.interpolate import CubicSplineimport matplotlib.pyplot as pltfrom os.path import joinnp.random.seed(1129)def autocor_norm(av,st,le,au):    # average, standard deviation, length, autocorrelation    rn = np.random.normal(av,st,le)    b = np.sqrt(1-au**2)    rn_au = np.zeros(le)    rn_au[0] = rn[0]    for i in range(1,le):        rn_au[i] = au*rn_au[i-1]+b*rn[i]    return rn_audef create_forecast(data, dt):    ''' Adds sythetic noise to the data to make a "forecast".        Noise characteristics vary by resource type and time horizon        dt is either 5 or 60    '''    # Characteristics are approximate, drawn from Allison Campbell's info from WECC 2030 ADS    # and/or empirical tools from BPA and CAISO data.    mu = 0    std = 0.02    au_dict = {'5':0.99, '60':0.95}    red_noise = autocor_norm(mu,std,len(data),au_dict[f'{dt}'])    # +/- 3.0 sigma truncation    fact = 3.0    red_noise[red_noise>fact*std] = fact*std    red_noise[red_noise<-fact*std] = -fact*std    # Add red noise and truncate low/high values    cap = np.max(data)    forecast = data + cap*red_noise    forecast[forecast < 0] = 0    forecast[forecast > cap] = cap    return forecast# Load BA nameswith open("../ba_names.json", "r") as f:    ba_names = json.load(f)    ba_names = sorted(ba_names['ba'])# Read in demand filesdemand_data_hourly = pd.read_csv('Demand/New_Load_1hr.csv')demand_data_5min = pd.read_csv('Demand/New_Load_5min.csv')# Cycle through BAs and create 5min and hourly forecastsly = Falsenhrs = 365*24 + 24*lyn5min = 365*24*12 + 24*12*lydemand_fcst_hourly = np.zeros((nhrs,len(ba_names)))demand_fcst_5min = np.zeros((n5min,len(ba_names)))demand_actual_hourly = np.zeros((nhrs,len(ba_names)))demand_actual_5min = np.zeros((n5min,len(ba_names)))for i, ba in enumerate(ba_names):    ba_hourly = demand_data_hourly[ba].values    ba_5min = demand_data_5min[ba].values    demand_actual_hourly[:,i] = ba_hourly    demand_actual_5min[:,i] = ba_5min    demand_fcst_hourly[:,i] = create_forecast(ba_hourly, 60)    demand_fcst_5min[:,i] = create_forecast(ba_5min, 5)# Turn into DataFrames and save to parquet and csvdf_actual_hourly = pd.DataFrame(demand_actual_hourly, columns=ba_names)df_actual_5min = pd.DataFrame(demand_actual_5min, columns=ba_names)df_fcst_hourly = pd.DataFrame(demand_fcst_hourly, columns=ba_names)df_fcst_5min = pd.DataFrame(demand_fcst_5min, columns=ba_names)save_dir = '../market_clearing/system_data'df_actual_hourly.to_csv(join(save_dir,'demand_1hr_actual.csv'))df_actual_5min.to_csv(join(save_dir,'demand_5min_actual.csv'))df_fcst_hourly.to_csv(join(save_dir,'demand_1hr_forecast.csv'))df_fcst_5min.to_csv(join(save_dir,'demand_5min_forecast.csv'))df_actual_hourly.to_parquet(join(save_dir,'demand_1hr_actual.parquet'))df_actual_5min.to_parquet(join(save_dir,'demand_5min_actual.parquet'))df_fcst_hourly.to_parquet(join(save_dir,'demand_1hr_forecast.parquet'))df_fcst_5min.to_parquet(join(save_dir,'demand_5min_forecast.parquet'))